public class MatrixAdditionWithThreads {
    public static void main(String[] args) {
        int[][] matrix1 = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        int[][] matrix2 = {
            {10, 11, 12},
            {13, 14, 15},
            {16, 17, 18}
        };

        Thread t1 = new Thread(new MatrixThread(matrix1, "T1"));
        Thread t2 = new Thread(new MatrixThread(matrix2, "T2"));
        Thread t3 = new Thread(new MatrixAdditionThread("T3", t1, t2));
        Thread t4 = new Thread(new MatrixElementCounterThread("T4", t1, t2));

        t1.start();
        t2.start();
        t4.start();

        try {
            t4.join(); // Wait for T4 to complete
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        t3.start();
    }
}

class MatrixThread extends Thread {
    private int[][] matrix;
    private String name;

    public MatrixThread(int[][] matrix, String name) {
        this.matrix = matrix;
        this.name = name;
    }

    @Override
    public void run() {
        System.out.println(name + " is running...");
        // Perform some operation on the matrix, e.g., print it
        printMatrix(matrix);
    }

    private void printMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}

class MatrixElementCounterThread extends Thread {
    private Thread t1;
    private Thread t2;

    public MatrixElementCounterThread(String name, Thread t1, Thread t2) {
        super(name);
        this.t1 = t1;
        this.t2 = t2;
    }

    @Override
    public void run() {
        System.out.println(getName() + " is counting elements...");
        int count = countElements(t1) + countElements(t2);
        System.out.println("Total elements: " + count);
    }

    private int countElements(Thread thread) {
        int count = 0;
        int[][] matrix = ((MatrixThread) thread).matrix;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                count++;
            }
        }
        return count;
    }
}

class MatrixAdditionThread extends Thread {
    private Thread t1;
    private Thread t2;

    public MatrixAdditionThread(String name, Thread t1, Thread t2) {
        super(name);
        this.t1 = t1;
        this.t2 = t2;
    }

    @Override
    public void run() {
        System.out.println(getName() + " is adding matrices...");
        int[][] matrix1 = ((MatrixThread) t1).matrix;
        int[][] matrix2 = ((MatrixThread) t2).matrix;
        int[][] result = addMatrices(matrix1, matrix2);
        printMatrix(result);
    }

    private int[][] addMatrices(int[][] matrix1, int[][] matrix2) {
        int[][] result = new int[matrix1.length][matrix1[0].length];
        for (int i = 0; i < matrix1.length; i++) {
            for (int j = 0; j < matrix1[0].length; j++) {
                result[i][j] = matrix1[i][j] + matrix2[i][j];
            }
        }
        return result;
    }

    private void printMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}
